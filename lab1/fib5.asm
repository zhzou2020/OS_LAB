MLENGTH=128;buffer length

DATA	SEGMENT
MSG1	DB 'OS_LAB_1 FIBONACCI SEQUENCE$'
MSG2	DB 'Please input n = $'
MSG3	DB 'Fibonacci sequence is $'
BUFF	DB MLENGTH
	DB ?
	DB MLENGTH DUP (0)
CARRIER	DW	?;CARRIER IN CX AND BX
COUNTA	DW	0
COUNTB	DW	0
COLORB	DB 07H,17H,0FH,70H,74H
COLORE	LABEL BYTE
DATA	ENDS

CODE	SEGMENT
ASSUME	CS:CODE,DS:DATA
START:	LEA	BX,MSG1
	CALL	OUTSTR
	CALL	NEWLINE
	LEA	BX,MSG2
	CALL	OUTSTR

	MOV	AX,DATA
	MOV	DS,AX
	MOV	DX,OFFSET BUFF
	MOV	AH,10
	INT 	21H

	MOV 	AX,0;set AX to 0,input number
	MOV 	CH,0
	MOV 	CL,BUFF+1;length of input string
	MOV	DL,0AH
	MOV 	SI,OFFSET BUFF+2

READINP:	MOV 	BL,[SI]
	INC 	SI
	MUL 	DL
	SUB 	BL,30H
	ADD 	AL,BL
	LOOP	READINP;CX daojishu
	
	CALL	NEWLINE
	LEA 	BX,MSG3
	CALL 	OUTSTR
	
	MOV	CH,0
	MOV 	CL,AL
	MOV	COUNTA,CX
	MOV 	AX,0
	MOV	BX,0
	MOV	CX,1
	MOV	DX,1
	MOV	DI,OFFSET COLORB
	
OUTPUT:	CALL 	PRTNUM;output number in OP1,color is [DI]
	CALL	NEWSPC
	INC	DI
	CMP	DI,OFFSET COLORE
	JNZ	NEXT
	MOV	DI,OFFSET COLORB
NEXT:	;ADD 	AX,BX
	;XCHG	AX,BX
	
	;OP1=AX*2^16+CX,OP2=BX*2^16+DX
	ADD	CX,DX
	ADC	AX,BX
	XCHG	CX,DX
	XCHG	AX,BX
	DEC	COUNTA
	CMP	COUNTA,0
	JNZ	OUTPUT;
	
	MOV	AH,4CH
	INT 	21H

OUTSTR	PROC      ;output string
	PUSH 	AX
	PUSH	DX
	MOV	AX,DATA
	MOV	DS,AX
	MOV	DX,BX ;BX for string address
	MOV	AH,9
	INT 	21H
	POP 	DX
	POP 	AX
	RET
OUTSTR	ENDP

PRTNUM	PROC
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	MOV	BX,DATA
	MOV	DS,BX

;AX=10*P+Q
;(AX*2^16+CX)/10=2^16*P+(2^16*Q+CX)/10
;quotient=2^16*P+q,reminder=r
	MOV	COUNTB,0
	MOV BX,10
DIVI:
	DIV	BL
	;AL:P,AH:Q
	PUSH	AX
	MOV	DL,AH
	MOV	DH,0
	MOV	AX,CX
	DIV	BX
	;AX:q,DX:r
	MOV	CX,AX
	POP	AX
	MOV	AH,0
	PUSH	DX
	INC	COUNTB
	CMP	CX,0;if the quotient is 0
	JNZ	DIVI
	MOV	CX,COUNTB
OUTP:	
 	POP	DX
	ADD	DL,30H
	CALL	PRTCHAR
	LOOP 	OUTP

	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
PRTNUM	ENDP

;ASCII IN DL
PRTCHAR	PROC
	PUSH	AX
	PUSH	BX
	PUSH	CX
	MOV	AH,9
	MOV 	BL,[DI];color
	MOV	BH,0;page number
	MOV 	CX,1;times
	INT 	10H

	MOV	AH,2
	INT	21H
	POP	CX
	POP	BX
	POP	AX
	RET
PRTCHAR	ENDP

NEWLINE	PROC
	PUSH	AX
	PUSH	DX
	MOV	DL,0DH
	MOV	AH,2
	INT	21H
	MOV	DL,0AH
	MOV	AH,2
	INT	21H
	POP	DX
	POP	AX
	RET
NEWLINE ENDP

NEWSPC	PROC
	PUSH	AX
	PUSH	DX
	MOV	DL,20H
	MOV	AH,2
	INT	21H
	POP	DX
	POP	AX
	RET
NEWSPC	ENDP

CODE	ENDS
	END	START








